Error: function_clause
[{rebar_completion_bash,nested_cmd_clause,
                        [#{args => [],name => "do",
                           help =>
                               "Higher order provider for running multiple tasks in a sequence.",
                           cmds =>
                               [#{args => [],name => "lfe",
                                  help => "lfe namespace",
                                  cmds =>
                                      [#{args => [],name => "versions",
                                         help => "Get various versions",
                                         cmds => []},
                                       #{args => [],name => "run-release",
                                         help => "Run an LFE release",
                                         cmds => []},
                                       #{args => [],name => "run-escript",
                                         help => "Run an LFE escript",
                                         cmds => []},
                                       #{args =>
                                             [#{short => 109,type => string,
                                                long => "main",
                                                help =>
                                                    "Provide project file that contains a main function"}],
                                         name => "run",
                                         help =>
                                             "Run the project's main function.",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => atom,long => "name",
                                                help =>
                                                    "Gives a long name to the node."},
                                              #{short => undefined,
                                                type => atom,long => "sname",
                                                help =>
                                                    "Gives a short name to the node."},
                                              #{short => undefined,
                                                type => atom,
                                                long => "setcookie",
                                                help =>
                                                    "Sets the cookie if the node is distributed."},
                                              #{short => undefined,
                                                type => string,
                                                long => "script",
                                                help =>
                                                    "Path to an escript file to run before starting the project apps. Defaults to rebar.config {shell, [{script_file, File}]} if not specified."},
                                              #{short => undefined,
                                                type => string,long => "apps",
                                                help =>
                                                    "A list of apps to boot before starting the REPL. (E.g. --apps app1,app2,app3) Defaults to rebar.config {shell, [{apps, Apps}]} or relx apps if not specified."},
                                              #{short => 114,type => atom,
                                                long => "relname",
                                                help =>
                                                    "Name of the release to use as a template for the REPL session"},
                                              #{short => 118,type => string,
                                                long => "relvsn",
                                                help =>
                                                    "Version of the release to use for the shell session"},
                                              #{short => undefined,
                                                type => boolean,
                                                long => "start_clean",
                                                help =>
                                                    "Cancel any applications in the 'apps' list or release."},
                                              #{short => undefined,
                                                type => string,
                                                long => "env_file",
                                                help =>
                                                    "Path to file of os environment variables to setup before expanding vars in config files."},
                                              #{short => undefined,
                                                type => string,
                                                long => "user_drv_args",
                                                help =>
                                                    "Arguments passed to user_drv start function for creating custom shells."}],
                                         name => "repl",
                                         help =>
                                             "Run an LFE REPL with project apps and deps in path.",
                                         cmds => []},
                                       #{args => [],name => "release",
                                         help =>
                                             "Build a release for the LFE project",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => string,long => "app",
                                                help =>
                                                    "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
                                              #{short => undefined,
                                                type => string,
                                                long => "application",
                                                help =>
                                                    "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
                                              #{short => undefined,
                                                type => boolean,
                                                long => "color",
                                                help =>
                                                    "Whether to display tests in ANSI-highlighted colors."},
                                              #{short => 99,type => boolean,
                                                long => "cover",
                                                help =>
                                                    "Generate cover data. Defaults to false."},
                                              #{short => undefined,
                                                type => string,
                                                long => "cover_export_name",
                                                help =>
                                                    "Base name of the coverdata file to write"},
                                              #{short => 100,type => string,
                                                long => "dir",
                                                help =>
                                                    "Comma separated list of dirs to load tests from. Equivalent to `[{dir, Dir}]`."},
                                              #{short => 102,type => string,
                                                long => "file",
                                                help =>
                                                    "Comma separated list of files to load tests from. Equivalent to `[{file, File}]`."},
                                              #{short => 115,type => string,
                                                long => "suite",
                                                help =>
                                                    "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
                                              #{short => 109,type => string,
                                                long => "module",
                                                help =>
                                                    "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
                                              #{short => 118,type => boolean,
                                                long => "verbose",
                                                help =>
                                                    "Verbose output. Defaults to false."},
                                              #{short => 112,type => boolean,
                                                long => "profile",
                                                help =>
                                                    "Show the slowest tests. Defaults to false."},
                                              #{short => undefined,
                                                type => atom,long => "sname",
                                                help =>
                                                    "Gives a short name to the node"},
                                              #{short => undefined,
                                                type => atom,long => "name",
                                                help =>
                                                    "Gives a long name to the node"},
                                              #{short => 116,type => string,
                                                long => "test",
                                                help =>
                                                    "Comma separated list of tests to run. The format is `Module:Func1+Func2`. Equivalent to `[{test, Module, Function}]`."},
                                              #{short => 108,type => atom,
                                                long => "test-listener",
                                                help =>
                                                    "Which test listener to run; legal values are 'ltest-listener', 'eunit_progress', and  'eunit_surefire'."},
                                              #{short => 116,type => atom,
                                                long => "test-type",
                                                help =>
                                                    "type of tests to run; legal valuues are unit, system, integration, or all"},
                                              #{short => 103,type => string,
                                                long => "generator",
                                                help =>
                                                    "Comma separated list of generators to load tests from. The format is `Module:Func1+Func2`. Equivalent to `[{generator, Module, Function}]`."}],
                                         name => "ltest",
                                         help =>
                                             "Run LFE tests that have been created with the ltest project.",
                                         cmds => []},
                                       #{args => [],name => "escriptize",
                                         help =>
                                             "Escriptize an LFE escript project",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => string,long => "path",
                                                help =>
                                                    "Provide the path to the file or files to convert (wildcard/globbing is supported)."}],
                                         name => "confabulate",
                                         help =>
                                             "Convert the given LFE data file(s) to Erlang file(s).",
                                         cmds => []},
                                       #{args => [],name => "compile",
                                         help => "Compile LFE project",
                                         cmds => []},
                                       #{args => [],name => "clean-cache",
                                         help =>
                                             "Remove the project's cache directories",
                                         cmds => []},
                                       #{args => [],name => "clean-build",
                                         help =>
                                             "Remove the rebar _build directory",
                                         cmds => []},
                                       #{args => [],name => "clean-all",
                                         help => "Execute all clean commands",
                                         cmds => []},
                                       #{args => [],name => "clean",
                                         help => "Clean apps .ebin files",
                                         cmds => []}]},
                                #{args => [],name => "plugins",
                                  help => "plugins namespace",
                                  cmds =>
                                      [#{args =>
                                             [#{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help => "Plugin to upgrade"},
                                              #{short => 97,type => undefined,
                                                long => "all",
                                                help =>
                                                    "Upgrade all plugins."}],
                                         name => "upgrade",
                                         help => "Upgrade plugins",cmds => []},
                                       #{args => [],name => "list",
                                         help =>
                                             "List local and global plugins for this project",
                                         cmds => []}]},
                                #{args => [],name => "hex",
                                  help => "hex namespace",
                                  cmds =>
                                      [#{args =>
                                             [#{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."},
                                              #{short => 121,type => boolean,
                                                long => "yes",
                                                help =>
                                                    "Publishes the package without any confirmation prompts"},
                                              #{short => undefined,
                                                type => boolean,
                                                long => "replace",
                                                help =>
                                                    "Allows overwriting an existing package version if it exists. Private packages can always be overwritten, publicpackages can only be overwritten within one hour after they were initially published."},
                                              #{short => 112,type => string,
                                                long => "package",
                                                help =>
                                                    "Specifies the package to use with the publish command, currently only utilized in a revert operation"},
                                              #{short => undefined,
                                                type => string,
                                                long => "revert",
                                                help =>
                                                    "Revert given version, if the last version is reverted the package is removed"},
                                              #{short => undefined,
                                                type => boolean,
                                                long => "without-docs",
                                                help =>
                                                    "Publishing a package without publishing documentation that may be automatically generated"}],
                                         name => "publish",
                                         help =>
                                             "Publish a new version of your package and update the package",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help =>
                                                    "Name of the package to retire."},
                                              #{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help =>
                                                    "Version of the package to retire."},
                                              #{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help =>
                                                    "Reason to retire package."},
                                              #{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help =>
                                                    "Clarifying message for retirement"},
                                              #{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."}],
                                         name => "retire",
                                         help =>
                                             "Mark a package as deprecated.",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help =>
                                                    "Name of the package to delete."},
                                              #{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help =>
                                                    "Version of the package to delete."},
                                              #{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."}],
                                         name => "revert",
                                         help =>
                                             "Delete a package from the repository",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help => "Search term."},
                                              #{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."}],
                                         name => "search",
                                         help =>
                                             "Display packages matching the given search query",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => string,
                                                long => "revert",
                                                help =>
                                                    "Revert given version."},
                                              #{short => undefined,
                                                type => boolean,
                                                long => "dry-run",
                                                help =>
                                                    "Generates docs (if configured) but does not publish the docs. Useful for inspecting docs before publishing."},
                                              #{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."}],
                                         name => "docs",
                                         help =>
                                             "Publish documentation for the current project and version",
                                         cmds => []},
                                       #{args =>
                                             [#{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help => "Repo task to run"},
                                              #{short => undefined,
                                                type => string,
                                                long => undefined,
                                                help =>
                                                    "Name of a repository"},
                                              #{short => 107,type => string,
                                                long => "key",
                                                help =>
                                                    "Authentication key for repository"}],
                                         name => "repo",
                                         help =>
                                             "Add, remove or list configured repositories and their auth keys",
                                         cmds => []},
                                       #{args =>
                                             [#{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."},
                                              #{short => 108,type => string,
                                                long => "level",
                                                help => "Ownership level."},
                                              #{short => 116,type => boolean,
                                                long => "transfer",
                                                help => "Transfer Package"}],
                                         name => "owner",
                                         help =>
                                             "Add, remove, transfer or list package owners",
                                         cmds => []},
                                       #{args =>
                                             [#{short => 97,type => boolean,
                                                long => "all",help => "all."},
                                              #{short => 107,type => string,
                                                long => "key-name",
                                                help => "key-name"},
                                              #{short => 112,type => list,
                                                long => "permission",
                                                help => "perms."},
                                              #{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."}],
                                         name => "key",
                                         help =>
                                             "Remove or list API keys associated with your account",
                                         cmds => []},
                                       #{args =>
                                             [#{short => 105,type => string,
                                                long => "increment",
                                                help =>
                                                    "Type of semver increment: major, minor or patch"},
                                              #{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."}],
                                         name => "cut",
                                         help =>
                                             "Increment version number and publish package",
                                         cmds => []},
                                       #{args =>
                                             [#{short => 114,type => string,
                                                long => "repo",
                                                help =>
                                                    "Repository to use for this command."}],
                                         name => "user",
                                         help => "Hex user tasks",
                                         cmds => []}]},
                                #{args => [],name => "experimental",
                                  help => "experimental namespace",
                                  cmds =>
                                      [#{args => [],name => "vendor",
                                         help =>
                                             "Turns dependencies into top-level apps",
                                         cmds => []}]},
                                #{args => [],name => "local",
                                  help => "local namespace",
                                  cmds =>
                                      [#{args => [],name => "upgrade",
                                         help =>
                                             "Download latest rebar3 escript and extract.",
                                         cmds => []},
                                       #{args => [],name => "install",
                                         help =>
                                             "Extract libs from rebar3 escript along with a run script.",
                                         cmds => []}]},
                                #{args => [],name => "alias",
                                  help => "List aliases' definitions.",
                                  cmds => []},
                                #{args => [],name => "xref",
                                  help => "Run cross reference analysis.",
                                  cmds => []},
                                #{args => [],name => "version",
                                  help =>
                                      "Print version for rebar and current Erlang.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 97,type => undefined,
                                         long => "all",
                                         help => "Upgrade all dependencies."},
                                       #{short => undefined,type => string,
                                         long => undefined,
                                         help =>
                                             "List of packages to upgrade."}],
                                  name => "upgrade",
                                  help => "Upgrade dependencies.",cmds => []},
                                #{args => [],name => "update",
                                  help => "Update package index.",cmds => []},
                                #{args =>
                                      [#{short => 97,type => undefined,
                                         long => "all",
                                         help =>
                                             "Unlock all dependencies and remove the lock file."},
                                       #{short => undefined,type => string,
                                         long => undefined,
                                         help =>
                                             "List of packages to unlock."}],
                                  name => "unlock",
                                  help => "Unlock dependencies.",cmds => []},
                                #{args =>
                                      [#{short => undefined,type => boolean,
                                         long => "all",
                                         help =>
                                             "If true runs the command against all configured  releases"},
                                       #{short => 110,type => string,
                                         long => "relname",
                                         help =>
                                             "Specify the name for the release that will be generated"},
                                       #{short => 118,type => string,
                                         long => "relvsn",
                                         help =>
                                             "Specify the version for the release"},
                                       #{short => 117,type => string,
                                         long => "upfrom",
                                         help =>
                                             "Only valid with relup target, specify the release to upgrade from"},
                                       #{short => 111,type => string,
                                         long => "output-dir",
                                         help =>
                                             "The output directory for the release. This is `./` by default."},
                                       #{short => 104,type => undefined,
                                         long => "help",help => "Print usage"},
                                       #{short => 108,type => string,
                                         long => "lib-dir",
                                         help =>
                                             "Additional dir that should be searched for OTP Apps"},
                                       #{short => 100,type => boolean,
                                         long => "dev-mode",
                                         help =>
                                             "Symlink the applications and configuration into the release instead of copying"},
                                       #{short => 105,type => string,
                                         long => "include-erts",
                                         help =>
                                             "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
                                       #{short => 97,type => string,
                                         long => "override",
                                         help =>
                                             "Provide an app name and a directory to override in the form <appname>:<app directory>"},
                                       #{short => 99,type => string,
                                         long => "config",
                                         help => "The path to a config file"},
                                       #{short => undefined,type => string,
                                         long => "overlay_vars",
                                         help =>
                                             "Path to a file of overlay variables"},
                                       #{short => undefined,type => string,
                                         long => "vm_args",
                                         help =>
                                             "Path to a file to use for vm.args"},
                                       #{short => undefined,type => string,
                                         long => "sys_config",
                                         help =>
                                             "Path to a file to use for sys.config"},
                                       #{short => undefined,type => string,
                                         long => "system_libs",
                                         help =>
                                             "Boolean or path to dir of Erlang system libs"},
                                       #{short => undefined,type => undefined,
                                         long => "version",
                                         help => "Print relx version"},
                                       #{short => 114,type => string,
                                         long => "root",
                                         help => "The project root directory"},
                                       #{short => 109,type => string,
                                         long => "relnames",
                                         help =>
                                             "Like --all, but only build the releases in the list, e.g. --relnames rel1,rel2"}],
                                  name => "tar",
                                  help =>
                                      "Tar archive of release built of project.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => "config",
                                         help =>
                                             "Path to the config file to use. Defaults to {shell, [{config, File}]} and then the relx sys.config file if not specified."},
                                       #{short => undefined,type => atom,
                                         long => "name",
                                         help =>
                                             "Gives a long name to the node."},
                                       #{short => undefined,type => atom,
                                         long => "sname",
                                         help =>
                                             "Gives a short name to the node."},
                                       #{short => undefined,type => atom,
                                         long => "setcookie",
                                         help =>
                                             "Sets the cookie if the node is distributed."},
                                       #{short => undefined,type => string,
                                         long => "script",
                                         help =>
                                             "Path to an escript file to run before starting the project apps. Defaults to rebar.config {shell, [{script_file, File}]} if not specified."},
                                       #{short => undefined,type => string,
                                         long => "apps",
                                         help =>
                                             "A list of apps to boot before starting the shell. (E.g. --apps app1,app2,app3) Defaults to rebar.config {shell, [{apps, Apps}]} or relx apps if not specified."},
                                       #{short => 114,type => atom,
                                         long => "relname",
                                         help =>
                                             "Name of the release to use as a template for the shell session."},
                                       #{short => 118,type => string,
                                         long => "relvsn",
                                         help =>
                                             "Version of the release to use for the shell session."},
                                       #{short => undefined,type => boolean,
                                         long => "start-clean",
                                         help =>
                                             "Cancel any applications in the 'apps' list or release."},
                                       #{short => undefined,type => string,
                                         long => "env-file",
                                         help =>
                                             "Path to file of os environment variables to setup before expanding vars in config files."},
                                       #{short => undefined,type => string,
                                         long => "user_drv_args",
                                         help =>
                                             "For versions of Erlang prior to 26, this option can be used to pass arguments to the user_drv start function for creating custom shells. Starting with Erlang 26, the arguments defined with this option are applied to the shell start_interactive function."},
                                       #{short => undefined,type => string,
                                         long => "eval",
                                         help =>
                                             "Erlang term(s) to execute after the apps have been started, but before the shell is presented to the user."}],
                                  name => "shell",
                                  help =>
                                      "Run shell with project apps and deps in path.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => undefined,
                                         help =>
                                             "Task to print details for."}],
                                  name => "report",
                                  help =>
                                      "Provide a crash report to be sent to the rebar3 issues page.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => boolean,
                                         long => "all",
                                         help =>
                                             "If true runs the command against all configured  releases"},
                                       #{short => 110,type => string,
                                         long => "relname",
                                         help =>
                                             "Specify the name for the release that will be generated"},
                                       #{short => 118,type => string,
                                         long => "relvsn",
                                         help =>
                                             "Specify the version for the release"},
                                       #{short => 117,type => string,
                                         long => "upfrom",
                                         help =>
                                             "Only valid with relup target, specify the release to upgrade from"},
                                       #{short => 111,type => string,
                                         long => "output-dir",
                                         help =>
                                             "The output directory for the release. This is `./` by default."},
                                       #{short => 104,type => undefined,
                                         long => "help",help => "Print usage"},
                                       #{short => 108,type => string,
                                         long => "lib-dir",
                                         help =>
                                             "Additional dir that should be searched for OTP Apps"},
                                       #{short => 100,type => boolean,
                                         long => "dev-mode",
                                         help =>
                                             "Symlink the applications and configuration into the release instead of copying"},
                                       #{short => 105,type => string,
                                         long => "include-erts",
                                         help =>
                                             "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
                                       #{short => 97,type => string,
                                         long => "override",
                                         help =>
                                             "Provide an app name and a directory to override in the form <appname>:<app directory>"},
                                       #{short => 99,type => string,
                                         long => "config",
                                         help => "The path to a config file"},
                                       #{short => undefined,type => string,
                                         long => "overlay_vars",
                                         help =>
                                             "Path to a file of overlay variables"},
                                       #{short => undefined,type => string,
                                         long => "vm_args",
                                         help =>
                                             "Path to a file to use for vm.args"},
                                       #{short => undefined,type => string,
                                         long => "sys_config",
                                         help =>
                                             "Path to a file to use for sys.config"},
                                       #{short => undefined,type => string,
                                         long => "system_libs",
                                         help =>
                                             "Boolean or path to dir of Erlang system libs"},
                                       #{short => undefined,type => undefined,
                                         long => "version",
                                         help => "Print relx version"},
                                       #{short => 114,type => string,
                                         long => "root",
                                         help => "The project root directory"},
                                       #{short => 109,type => string,
                                         long => "relnames",
                                         help =>
                                             "Like --all, but only build the releases in the list, e.g. --relnames rel1,rel2"}],
                                  name => "relup",
                                  help => "Create relup of releases.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => boolean,
                                         long => "all",
                                         help =>
                                             "If true runs the command against all configured  releases"},
                                       #{short => 110,type => string,
                                         long => "relname",
                                         help =>
                                             "Specify the name for the release that will be generated"},
                                       #{short => 118,type => string,
                                         long => "relvsn",
                                         help =>
                                             "Specify the version for the release"},
                                       #{short => 117,type => string,
                                         long => "upfrom",
                                         help =>
                                             "Only valid with relup target, specify the release to upgrade from"},
                                       #{short => 111,type => string,
                                         long => "output-dir",
                                         help =>
                                             "The output directory for the release. This is `./` by default."},
                                       #{short => 104,type => undefined,
                                         long => "help",help => "Print usage"},
                                       #{short => 108,type => string,
                                         long => "lib-dir",
                                         help =>
                                             "Additional dir that should be searched for OTP Apps"},
                                       #{short => 100,type => boolean,
                                         long => "dev-mode",
                                         help =>
                                             "Symlink the applications and configuration into the release instead of copying"},
                                       #{short => 105,type => string,
                                         long => "include-erts",
                                         help =>
                                             "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
                                       #{short => 97,type => string,
                                         long => "override",
                                         help =>
                                             "Provide an app name and a directory to override in the form <appname>:<app directory>"},
                                       #{short => 99,type => string,
                                         long => "config",
                                         help => "The path to a config file"},
                                       #{short => undefined,type => string,
                                         long => "overlay_vars",
                                         help =>
                                             "Path to a file of overlay variables"},
                                       #{short => undefined,type => string,
                                         long => "vm_args",
                                         help =>
                                             "Path to a file to use for vm.args"},
                                       #{short => undefined,type => string,
                                         long => "sys_config",
                                         help =>
                                             "Path to a file to use for sys.config"},
                                       #{short => undefined,type => string,
                                         long => "system_libs",
                                         help =>
                                             "Boolean or path to dir of Erlang system libs"},
                                       #{short => undefined,type => undefined,
                                         long => "version",
                                         help => "Print relx version"},
                                       #{short => 114,type => string,
                                         long => "root",
                                         help => "The project root directory"},
                                       #{short => 109,type => string,
                                         long => "relnames",
                                         help =>
                                             "Like --all, but only build the releases in the list, e.g. --relnames rel1,rel2"}],
                                  name => "release",
                                  help => "Build release of project.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => "app",
                                         help =>
                                             "Comma separated list of applications to return paths for."},
                                       #{short => undefined,type => boolean,
                                         long => "base",
                                         help =>
                                             "Return the `base' path of the current profile."},
                                       #{short => undefined,type => boolean,
                                         long => "bin",
                                         help =>
                                             "Return the `bin' path of the current profile."},
                                       #{short => undefined,type => boolean,
                                         long => "ebin",
                                         help =>
                                             "Return all `ebin' paths of the current profile's applications."},
                                       #{short => undefined,type => boolean,
                                         long => "lib",
                                         help =>
                                             "Return the `lib' path of the current profile."},
                                       #{short => undefined,type => boolean,
                                         long => "priv",
                                         help =>
                                             "Return the `priv' path of the current profile's applications."},
                                       #{short => 115,type => string,
                                         long => "separator",
                                         help =>
                                             "In case of multiple return paths, the separator character to use to join them."},
                                       #{short => undefined,type => boolean,
                                         long => "src",
                                         help =>
                                             "Return the `src' path of the current profile's applications."},
                                       #{short => undefined,type => boolean,
                                         long => "rel",
                                         help =>
                                             "Return the `rel' path of the current profile."}],
                                  name => "path",
                                  help =>
                                      "Print paths to build dirs in current profile.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => undefined,
                                         help =>
                                             "Package to fetch information for."}],
                                  name => "pkgs",
                                  help => "List information for a package.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 102,type => undefined,
                                         long => "force",
                                         help => "overwrite existing files"}],
                                  name => "new",
                                  help => "Create new project from templates.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => undefined,
                                         help => "Task to print help for."}],
                                  name => "help",
                                  help =>
                                      "Display a list of tasks or help for a given task or subtask.",
                                  cmds => []},
                                #{args => [],name => "get-deps",
                                  help => "Fetch dependencies.",cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => "app",
                                         help =>
                                             "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
                                       #{short => undefined,type => string,
                                         long => "application",
                                         help =>
                                             "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
                                       #{short => 99,type => boolean,
                                         long => "cover",
                                         help =>
                                             "Generate cover data. Defaults to false."},
                                       #{short => undefined,type => string,
                                         long => "cover_export_name",
                                         help =>
                                             "Base name of the coverdata file to write"},
                                       #{short => 112,type => boolean,
                                         long => "profile",
                                         help =>
                                             "Show the slowest tests. Defaults to false."},
                                       #{short => 100,type => string,
                                         long => "dir",
                                         help =>
                                             "Comma separated list of dirs to load tests from. Equivalent to `[{dir, Dir}]`."},
                                       #{short => 102,type => string,
                                         long => "file",
                                         help =>
                                             "Comma separated list of files to load tests from. Equivalent to `[{file, File}]`."},
                                       #{short => 109,type => string,
                                         long => "module",
                                         help =>
                                             "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
                                       #{short => 116,type => string,
                                         long => "test",
                                         help =>
                                             "Comma separated list of tests to run. The format is `Module:Func1+Func2`. Equivalent to `[{test, Module, Function}]`."},
                                       #{short => 115,type => string,
                                         long => "suite",
                                         help =>
                                             "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
                                       #{short => 103,type => string,
                                         long => "generator",
                                         help =>
                                             "Comma separated list of generators to load tests from. The format is `Module:Func1+Func2`. Equivalent to `[{generator, Module, Function}]`."},
                                       #{short => 118,type => boolean,
                                         long => "verbose",
                                         help =>
                                             "Verbose output. Defaults to false."},
                                       #{short => undefined,type => atom,
                                         long => "name",
                                         help =>
                                             "Gives a long name to the node"},
                                       #{short => undefined,type => atom,
                                         long => "sname",
                                         help =>
                                             "Gives a short name to the node"},
                                       #{short => undefined,type => string,
                                         long => "sys_config",
                                         help =>
                                             "List of application config files"},
                                       #{short => undefined,type => atom,
                                         long => "setcookie",
                                         help =>
                                             "Sets the cookie if the node is distributed"}],
                                  name => "eunit",help => "Run EUnit Tests.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 97,type => string,
                                         long => "main-app",
                                         help =>
                                             "Specify the name of the application to build an escript for."}],
                                  name => "escriptize",
                                  help => "Generate escript archive.",
                                  cmds => []},
                                #{args => [],name => "edoc",
                                  help => "Generate documentation using edoc.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 105,type => boolean,
                                         long => "incremental",
                                         help =>
                                             "Enable incremental analysis mode. Default: false"},
                                       #{short => 117,type => boolean,
                                         long => "update-plt",
                                         help =>
                                             "Enable updating the PLT. Default: true"},
                                       #{short => 115,type => boolean,
                                         long => "succ-typings",
                                         help =>
                                             "Enable success typing analysis. Default: true"},
                                       #{short => undefined,type => string,
                                         long => "base-plt-location",
                                         help =>
                                             "The location of base PLT file, defaults to $HOME/.cache/rebar3"},
                                       #{short => undefined,type => string,
                                         long => "plt-location",
                                         help =>
                                             "The location of the PLT file, defaults to the profile's base directory"},
                                       #{short => undefined,type => string,
                                         long => "plt-prefix",
                                         help =>
                                             "The prefix to the PLT file, defaults to \"rebar3\""},
                                       #{short => 97,type => string,
                                         long => "app",
                                         help =>
                                             "Perform success typing analysis of a single application"},
                                       #{short => undefined,type => string,
                                         long => "base-plt-prefix",
                                         help =>
                                             "The prefix to the base PLT file, defaults to \"rebar3\""},
                                       #{short => undefined,type => boolean,
                                         long => "statistics",
                                         help =>
                                             "Print information about the progress of execution. Default: false"}],
                                  name => "dialyzer",
                                  help =>
                                      "Run the Dialyzer analyzer on the project.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 118,type => undefined,
                                         long => "verbose",
                                         help =>
                                             "Print repo and branch/tag/ref for git and hg deps"}],
                                  name => "tree",
                                  help => "Print dependency tree.",cmds => []},
                                #{args => [],name => "deps",
                                  help => "List dependencies",cmds => []},
                                #{args =>
                                      [#{short => 114,type => boolean,
                                         long => "reset",
                                         help => "Reset all coverdata."},
                                       #{short => 118,type => boolean,
                                         long => "verbose",
                                         help => "Print coverage analysis."},
                                       #{short => 109,type => integer,
                                         long => "min_coverage",
                                         help =>
                                             "Mandate a coverage percentage required to succeed (0..100)"}],
                                  name => "cover",
                                  help => "Perform coverage analysis.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 97,type => string,
                                         long => "aliases",
                                         help =>
                                             "Comma separated list of OS level aliases on which rebar3 completion will be triggered (e.g. \"rebar\" or \"r3\")."},
                                       #{short => 102,type => string,
                                         long => "file",
                                         help =>
                                             "Completion file name. Relative to \"_build/\"."},
                                       #{short => 115,type => atom,
                                         long => "shell",
                                         help =>
                                             "Shell type, 'bash' or 'zsh'."}],
                                  name => "completion",
                                  help =>
                                      "Generate completion file for your shell.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 100,type => undefined,
                                         long => "deps_only",
                                         help =>
                                             "Only compile dependencies, no project apps will be built."}],
                                  name => "compile",
                                  help =>
                                      "Compile apps .app.src and .erl files.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => "dir",
                                         help =>
                                             "List of additional directories containing test suites"},
                                       #{short => undefined,type => string,
                                         long => "suite",
                                         help => "List of test suites to run"},
                                       #{short => undefined,type => string,
                                         long => "group",
                                         help => "List of test groups to run"},
                                       #{short => undefined,type => string,
                                         long => "case",
                                         help => "List of test cases to run"},
                                       #{short => undefined,type => string,
                                         long => "label",help => "Test label"},
                                       #{short => undefined,type => string,
                                         long => "config",
                                         help => "List of config files"},
                                       #{short => undefined,type => string,
                                         long => "spec",
                                         help =>
                                             "List of test specifications"},
                                       #{short => undefined,type => boolean,
                                         long => "join_specs",
                                         help =>
                                             "Merge all test specifications and perform a single test run"},
                                       #{short => undefined,type => boolean,
                                         long => "allow_user_terms",
                                         help =>
                                             "Allow user defined config values in config files"},
                                       #{short => undefined,type => string,
                                         long => "logdir",
                                         help => "Log folder"},
                                       #{short => undefined,type => string,
                                         long => "logopts",
                                         help =>
                                             "Options for common test logging"},
                                       #{short => undefined,type => integer,
                                         long => "verbosity",
                                         help => "Verbosity"},
                                       #{short => 99,type => boolean,
                                         long => "cover",
                                         help => "Generate cover data"},
                                       #{short => undefined,type => string,
                                         long => "cover_export_name",
                                         help =>
                                             "Base name of the coverdata file to write"},
                                       #{short => undefined,type => integer,
                                         long => "repeat",
                                         help => "How often to repeat tests"},
                                       #{short => undefined,type => string,
                                         long => "duration",
                                         help =>
                                             "Max runtime (format: HHMMSS)"},
                                       #{short => undefined,type => string,
                                         long => "until",
                                         help => "Run until (format: HHMMSS)"},
                                       #{short => undefined,type => string,
                                         long => "force_stop",
                                         help =>
                                             "Force stop on test timeout (true | false | skip_rest)"},
                                       #{short => undefined,type => boolean,
                                         long => "basic_html",
                                         help => "Show basic HTML"},
                                       #{short => undefined,type => string,
                                         long => "stylesheet",
                                         help =>
                                             "CSS stylesheet to apply to html output"},
                                       #{short => undefined,type => string,
                                         long => "decrypt_key",
                                         help =>
                                             "Path to key for decrypting config"},
                                       #{short => undefined,type => string,
                                         long => "decrypt_file",
                                         help =>
                                             "Path to file containing key for decrypting config"},
                                       #{short => undefined,type => boolean,
                                         long => "abort_if_missing_suites",
                                         help =>
                                             "Abort if suites are missing"},
                                       #{short => undefined,type => integer,
                                         long => "multiply_timetraps",
                                         help => []},
                                       #{short => undefined,type => boolean,
                                         long => "scale_timetraps",
                                         help => "Scale timetraps"},
                                       #{short => undefined,type => string,
                                         long => "create_priv_dir",
                                         help =>
                                             "Create priv dir (auto_per_run | auto_per_tc | manual_per_tc)"},
                                       #{short => undefined,type => string,
                                         long => "include",
                                         help =>
                                             "Directories containing additional include files"},
                                       #{short => undefined,type => string,
                                         long => "readable",
                                         help =>
                                             "Shows test case names and only displays logs to shell on failures (true | compact | false)"},
                                       #{short => 118,type => boolean,
                                         long => "verbose",
                                         help => "Verbose output"},
                                       #{short => undefined,type => atom,
                                         long => "name",
                                         help =>
                                             "Gives a long name to the node"},
                                       #{short => undefined,type => atom,
                                         long => "sname",
                                         help =>
                                             "Gives a short name to the node"},
                                       #{short => undefined,type => atom,
                                         long => "setcookie",
                                         help =>
                                             "Sets the cookie if the node is distributed"},
                                       #{short => undefined,type => string,
                                         long => "sys_config",
                                         help =>
                                             "List of application config files"},
                                       #{short => undefined,type => boolean,
                                         long => "compile_only",
                                         help =>
                                             "Compile modules in the project with the test configuration but do not run the tests"},
                                       #{short => undefined,type => boolean,
                                         long => "retry",
                                         help =>
                                             "Experimental feature. If any specification for previously failing test is found, runs them."},
                                       #{short => undefined,type => boolean,
                                         long => "fail_fast",
                                         help =>
                                             "Experimental feature. If any test fails, the run is aborted. Since common test does not support this natively, we abort the rebar3 run on a failure. This May break CT's disk logging and other rebar3 features."}],
                                  name => "ct",help => "Run Common Tests.",
                                  cmds => []},
                                #{args =>
                                      [#{short => 97,type => undefined,
                                         long => "all",
                                         help =>
                                             "Clean all apps include deps"},
                                       #{short => undefined,type => string,
                                         long => "apps",
                                         help =>
                                             "Clean a specific list of apps or dependencies"},
                                       #{short => 112,type => string,
                                         long => "profile",
                                         help =>
                                             "Clean under profile. Equivalent to `rebar3 as <profile> clean`"}],
                                  name => "clean",
                                  help =>
                                      "Remove compiled beam files from apps.",
                                  cmds => []},
                                #{args =>
                                      [#{short => undefined,type => string,
                                         long => undefined,
                                         help => "Profiles to run as."}],
                                  name => "as",
                                  help =>
                                      "Higher order provider for running multiple tasks in a sequence as a certain profiles.",
                                  cmds =>
                                      [#{args => [],name => "test",help => [],
                                         cmds => []},
                                       #{args => [],name => "systest",
                                         help => [],cmds => []},
                                       #{args => [],name => "dialyzer",
                                         help => [],cmds => []},
                                       #{args => [],name => "prod",help => [],
                                         cmds => []}]},
                                #{args => [],name => "cmd",
                                  help =>
                                      "A rebar3 plugin to run custom shell commands 'cmd <command>'.",
                                  cmds => []},
                                #{args => [],name => "lint",
                                  help => "A rebar plugin for elvis",
                                  cmds => []}]},
                         [],1],
                        [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar_completion_bash.erl"},
                         {line,23}]},
 {rebar_completion_bash,'-main/2-lc$^2/1-3-',1,
                        [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar_completion_bash.erl"},
                         {line,83}]},
 {rebar_completion_bash,main,2,
                        [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar_completion_bash.erl"},
                         {line,83}]},
 {rebar_completion_bash,generate,2,
                        [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar_completion_bash.erl"},
                         {line,15}]},
 {rebar_prv_completion,do,1,
                       [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar_prv_completion.erl"},
                        {line,68}]},
 {rebar_core,do,2,
             [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar_core.erl"},
              {line,155}]},
 {rebar3,run_aux,2,
         [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar3.erl"},
          {line,205}]},
 {rebar3,main,1,
         [{file,"/home/mmin/oss/rebar3/apps/rebar/src/rebar3.erl"},
          {line,66}]}]

